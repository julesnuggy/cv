{"version":3,"sources":["components/aboutMe.tsx","assets/profile_photo.jpg","components/headerDetail.tsx","components/header.tsx","components/project.tsx","components/blocker.tsx","components/projectPopup.tsx","components/experience.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AboutMe","screenSize","useState","isTruncated","setIsTruncated","truncateContents","element","classList","add","expandContents","remove","useEffect","indentedText","document","getElementsByClassName","className","onClick","contains","style","float","icon","HeaderDetail","itemText","link","children","href","target","rel","Header","src","profile_photo","alt","Project","data","index","name","role","from","to","Blocker","closePopup","CoreInformation","TechStack","techStack","map","t","idx","Description","description","ProjectPopup","addEventListener","event","onEscapePress","keyCode","handleEscapePress","size","Experience","expandedProjects","setExpandedProjects","handleProjectClick","includes","newArray","filter","p","handleClosePopup","employer","location","source","summary","projects","CSSTransition","timeout","in","classNames","library","faUser","faMapMarkedAlt","faLaptopCode","faAddressCard","faTimesCircle","faPlusSquare","faMinusSquare","fab","App","window","innerWidth","setScreenSize","d","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79cdd444.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport '../App.scss';\r\n\r\ntype aboutMeProps = {\r\n  screenSize: number;\r\n}\r\n\r\nconst AboutMe = ({screenSize}: aboutMeProps) => {\r\n  const [isTruncated, setIsTruncated] = useState(false);\r\n\r\n  const truncateContents = (element: Element) => {\r\n    setIsTruncated(true);\r\n    element.classList.add('truncated');\r\n  };\r\n\r\n  const expandContents = (element: Element) => {\r\n    setIsTruncated(false);\r\n    element.classList.remove('truncated');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const indentedText = document.getElementsByClassName('indented-text')[0];\r\n    if (screenSize <= 480) {\r\n      truncateContents(indentedText);\r\n    } else {\r\n      expandContents(indentedText);\r\n    }\r\n  },[screenSize]);\r\n\r\n  const truncateExpandContents = () => {\r\n    const indentedText = document.getElementsByClassName('indented-text')[0];\r\n    indentedText.classList.contains('truncated') ?\r\n      expandContents(indentedText) :\r\n      truncateContents(indentedText);\r\n  };\r\n\r\n  return (\r\n  <div className=\"about-me code-block dark-theme\" onClick={truncateExpandContents}>\r\n    <div className=\"tag\">{'<AboutMe>'}\r\n      <span style={{float: 'right'}}>\r\n        {isTruncated ?\r\n          <FontAwesomeIcon icon={['far', 'plus-square']} className=\"expand-truncate-icon\"/> :\r\n          <FontAwesomeIcon icon={['far', 'minus-square']} className=\"expand-truncate-icon\"/>\r\n        }\r\n      </span>\r\n    </div>\r\n    <div className=\"indented-text\">\r\n      I love being a software developer because I enjoy problem solving, working in a trusting and collaborative\r\n      environment, and bringing ideas into reality through elegant code. In 2018, I changed my career as a change\r\n      management consultant to become a software developer by joining Makers Academy. There, I learnt to code in just 4\r\n      months, and started my first job only 1 month after graduating.\r\n      My experience on a wide variety of projects has expanded and bolstered my knowledge of programming best practices,\r\n      architectures, design patterns, and principles. I bring many skills from my consultancy background, including:\r\n      customer engagement, project management, workshop facilitation, business & data analytics, and ideation.\r\n\r\n    </div>\r\n    <div className=\"tag\">{'</AboutMe>'}</div>\r\n    <div className=\"tag-container\">\r\n      <div className=\"tag-wrapper\">\r\n        <div className=\"tag\">{'<CoreValues>'}</div>\r\n        <div className=\"indented-text\">\r\n          <li>Communication</li>\r\n          <li>Open Mindedness</li>\r\n          <li>Equity & Diversity</li>\r\n          <li>Courage to Experiment</li>\r\n        </div>\r\n        <div className=\"tag\">{'</CoreValues>'}</div>\r\n      </div>\r\n      <div className=\"tag-wrapper\">\r\n        <div className=\"tag\">{'<PersonalityTraits>'}</div>\r\n        <div className=\"indented-text\">\r\n          <li>Flexible & Adaptable</li>\r\n          <li>Focused & Determined</li>\r\n          <li>Problem Solver</li>\r\n          <li>Proactive</li>\r\n        </div>\r\n        <div className=\"tag\">{'</PersonalityTraits>'}</div>\r\n      </div>\r\n      <div className=\"tag-wrapper\">\r\n        <div className=\"tag\">{'<CodingPrinciples>'}</div>\r\n        <div className=\"indented-text\">\r\n          <li>Commit Often, Perfect Later</li>\r\n          <li>Robustness Through Tests</li>\r\n          <li>Code Reviews Help Everyone</li>\r\n          <li>Pairing Powers Productivity</li>\r\n        </div>\r\n        <div className=\"tag\">{'</CodingPrinciples>'}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)};\r\n\r\nexport default AboutMe;\r\n","export default __webpack_public_path__ + \"static/media/profile_photo.da117831.jpg\";","import React, { ReactNode } from 'react';\r\nimport '../styles/header.scss';\r\n\r\ntype HeaderDetailProps = {\r\n  itemText: string;\r\n  link?: string;\r\n  children?: ReactNode;\r\n};\r\n\r\nconst HeaderDetail = ({itemText, link, children}: HeaderDetailProps) => {\r\n  return (\r\n    <div className=\"header-detail\">\r\n      <div className=\"icon-container\">\r\n        {children}\r\n      </div>\r\n      {link ? <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">{itemText}</a> : <div>{itemText}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderDetail;\r\n","import React from 'react';\r\n\r\nimport profile_photo from '../assets/profile_photo.jpg';\r\nimport HeaderDetail from './headerDetail';\r\nimport '../styles/header.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div>\r\n        <img className=\"profile-photo\" src={profile_photo} alt=\"Julian Ng\"/>\r\n      </div>\r\n      <div className=\"header-details\">\r\n        <HeaderDetail itemText=\"Julian Ng (He/Him)\">\r\n          <FontAwesomeIcon icon=\"user\" className=\"icon\" />\r\n        </HeaderDetail>\r\n        <HeaderDetail itemText=\"Full-Stack Developer\">\r\n          <FontAwesomeIcon icon=\"laptop-code\" className=\"icon\" />\r\n        </HeaderDetail>\r\n        <HeaderDetail itemText=\"London, UK\">\r\n          <FontAwesomeIcon icon=\"map-marked-alt\" className=\"icon\" />\r\n        </HeaderDetail>\r\n        <HeaderDetail itemText=\"LinkedIn\" link=\"https://www.linkedin.com/in/julian-ng-43589420/\">\r\n          <FontAwesomeIcon icon={['fab', 'linkedin']} className=\"linkedin\" />\r\n        </HeaderDetail>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport { ProjectData } from '../data/experienceData';\r\nimport '../styles/project.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ntype ProjectProps = {\r\n  data: ProjectData;\r\n  index: number;\r\n  onClick: (index: number) => void;\r\n};\r\n\r\nconst Project = ({data, index, onClick}: ProjectProps) => (\r\n  <div className=\"project\" onClick={() => onClick(index)}>\r\n    <div className=\"project-details\">\r\n      <div className=\"core-information\">\r\n        <div>{data.name}</div>\r\n        <div>{data.role}</div>\r\n        <div>{data.from} - {data.to}</div>\r\n        <FontAwesomeIcon icon={['far', 'plus-square']} className=\"project-popup-open\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Project;\r\n","import React from 'react';\r\n\r\nimport '../styles/blocker.scss';\r\n\r\ntype BlockerProps = {\r\n  closePopup: () => void;\r\n}\r\n\r\nconst Blocker = ({closePopup}: BlockerProps) => (\r\n  <div className=\"blocker\" onClick={closePopup} />\r\n);\r\n\r\nexport default Blocker;\r\n","import React, { useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport { ProjectData } from '../data/experienceData';\r\nimport '../styles/project.scss';\r\nimport '../App.scss';\r\nimport Blocker from './blocker';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ntype ProjectProps = {\r\n  data: ProjectData;\r\n  closePopup: () => void;\r\n};\r\n\r\ntype DataProps = {\r\n  data: ProjectData;\r\n};\r\n\r\nconst handleEscapePress = (event: KeyboardEvent, onEscapePress: () => void) => {\r\n  if (event.keyCode === 27) {\r\n    onEscapePress();\r\n  }\r\n};\r\n\r\nconst CoreInformation = ({data}: DataProps) => (\r\n  <>\r\n    <div className=\"tag\">{'<BasicInfo>'}</div>\r\n    <div className=\"indented-text\">\r\n      <div>{data.name}</div>\r\n      <div>{data.role}</div>\r\n      <div>{data.from} - {data.to}</div>\r\n    </div>\r\n    <div className=\"tag\">{'</BasicInfo>'}</div>\r\n  </>\r\n);\r\n\r\nconst TechStack = ({data}: DataProps) => (\r\n    <>\r\n      <div className=\"tag\">{'<TechStack>'}</div>\r\n      <div className=\"tech-stack-list\">\r\n        {data.techStack.map((t, idx) => <li className=\"tech-stack-item\" key={idx}>{t}</li>)}\r\n      </div>\r\n      <div className=\"tag\">{'</TechStack>'}</div>\r\n    </>\r\n);\r\n\r\nconst Description = ({data}: DataProps) => (\r\n  <>\r\n    <div className=\"tag\">{'<Description>'}</div>\r\n    <ReactMarkdown className=\"description indented-text\">\r\n      {data.description}\r\n    </ReactMarkdown>\r\n    <div className=\"tag\">{'</Description>'}</div>\r\n  </>\r\n);\r\n\r\nconst ProjectPopup = ({data, closePopup}: ProjectProps) => {\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', (event) => {\r\n      handleEscapePress(event, closePopup);\r\n    });\r\n  });\r\n\r\n  return (\r\n  <>\r\n    <Blocker closePopup={closePopup} />\r\n    <div className=\"project-popup code-block dark-theme\">\r\n      <div className=\"project-details\">\r\n        <div className=\"project-popup-close\" onClick={closePopup}>\r\n          <FontAwesomeIcon icon={['far', 'times-circle']} size=\"lg\" />\r\n        </div>\r\n        <CoreInformation data={data} />\r\n        <TechStack data={data} />\r\n        <Description data={data} />\r\n      </div>\r\n    </div>\r\n  </>\r\n); };\r\n\r\nexport default ProjectPopup ;\r\n","import React, { useState } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport Project from './project';\r\nimport ProjectPopup from './projectPopup';\r\nimport { ExperienceData } from '../data/experienceData';\r\nimport '../styles/experience.scss';\r\nimport '../App.scss';\r\n\r\ntype EmployerCardProps = {\r\n  data: ExperienceData;\r\n};\r\n\r\nconst Experience = ({data}: EmployerCardProps) => {\r\n  const [ expandedProjects, setExpandedProjects ] = useState([-1]);\r\n\r\n  const handleProjectClick = (index: number) => {\r\n    if (expandedProjects.includes(index)) {\r\n      const newArray = expandedProjects.filter((p) => p !== index);\r\n      setExpandedProjects(newArray);\r\n    } else {\r\n      setExpandedProjects([index]);\r\n    }\r\n  };\r\n\r\n  const handleClosePopup = () => (\r\n    setExpandedProjects([-1])\r\n  );\r\n\r\n  return (\r\n    <div className=\"experience\">\r\n      <div className=\"experience-title\">\r\n        {data.employer} || {data.from} - {data.to} || {data.location}\r\n      </div>\r\n      <ReactMarkdown className=\"code-block\" source={data.summary} />\r\n      <div className=\"project-container\">\r\n        {data.projects.map((p, idx) =>\r\n          <>\r\n            <Project data={p} key={`p-${idx}`} index={idx} onClick={handleProjectClick} />\r\n            <CSSTransition timeout={200} in={expandedProjects.includes(idx)} classNames=\"project-popup\" key={idx}>\r\n              <>\r\n                {\r\n                  expandedProjects.includes(idx) &&\r\n                  <ProjectPopup\r\n                    data={p}\r\n                    key={`pp-${idx}`}\r\n                    closePopup={handleClosePopup}\r\n                  />\r\n                }\r\n              </>\r\n            </CSSTransition>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.scss';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faUser, faMapMarkedAlt, faLaptopCode, faAddressCard } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTimesCircle, faPlusSquare, faMinusSquare } from '@fortawesome/free-regular-svg-icons';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport AboutMe from './components/aboutMe';\r\nimport Header from './components/header';\r\nimport Experience from './components/experience';\r\nimport data from './data/experienceData.json';\r\n\r\nlibrary.add(faUser, faMapMarkedAlt, faLaptopCode, faAddressCard, faTimesCircle, faPlusSquare, faMinusSquare, fab);\r\n\r\nconst App: React.FC = () => {\r\n  const [screenSize, setScreenSize] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => setScreenSize(window.innerWidth));\r\n  });\r\n\r\n  return (\r\n    <div className=\"app-body\">\r\n      <Header />\r\n      <AboutMe screenSize={screenSize} />\r\n      <div className=\"experience-container\">\r\n        {data.map((d, idx) => <Experience data={d} key={`e-${idx}`} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}